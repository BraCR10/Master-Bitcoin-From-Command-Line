#!/usr/bin/env bash
#
# -------------------------------------------------------------------
# Ejercicio Semana 1: Mastering Bitcoin From the Command Line
# Soluci√≥n Completa y Automatizada
#
# Este script realiza todo el proceso:
# 1. Descarga y verifica criptogr√°ficamente los binarios de Bitcoin Core.
# 2. Instala los binarios en el sistema.
# 3. Configura e inicia un nodo en modo regtest.
# 4. Crea y financia wallets para simular una transacci√≥n.
# 5. Ejecuta una transacci√≥n y reporta los detalles.
# -------------------------------------------------------------------

set -euo pipefail

# --- SECCI√ìN 1: CONFIGURACI√ìN Y VERIFICACI√ìN ---
echo "‚û°Ô∏è SECCI√ìN 1: Configuraci√≥n del nodo Bitcoin Core..."

# Variables para la versi√≥n de Bitcoin Core. Cambia la versi√≥n si es necesario.
BITCOIN_VERSION="29.0"
BITCOIN_URL="https://bitcoincore.org/bin/bitcoin-core-${BITCOIN_VERSION}"
TAR_FILE="bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz"
SIGNER_KEY="01EA5486DE18A882D4C2684590C8019E36C2E964" # Clave GPG de Wladimir J. van der Laan

# 1. Descargar los binarios, hashes y firmas
echo "‚¨áÔ∏è  Descargando Bitcoin Core v${BITCOIN_VERSION} (si es necesario)..."
if [ ! -f "$TAR_FILE" ]; then
    wget -q "${BITCOIN_URL}/${TAR_FILE}"
    wget -q "${BITCOIN_URL}/SHA256SUMS"
    wget -q "${BITCOIN_URL}/SHA256SUMS.asc"
    echo "‚úÖ Descarga completa."
else
    echo "‚úÖ Archivos de Bitcoin Core ya existen. Saltando descarga."
fi

# 2. Verificar la integridad de los archivos descargados
echo "üîé Verificando la integridad criptogr√°fica de los archivos..."
# Paso 2a: Verificar el hash del archivo
sha256sum --ignore-missing --check SHA256SUMS | grep "OK" || { echo "‚ùå Error: La verificaci√≥n del hash SHA256 fall√≥."; exit 1; }
echo "üëç Hash verificado correctamente."

# Paso 2b: Verificar la firma GPG del desarrollador
gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "$SIGNER_KEY" >/dev/null 2>&1
gpg --verify SHA256SUMS.asc SHA256SUMS 2>&1 | grep "Good signature" || { echo "‚ùå Error: La firma GPG es inv√°lida. El binario no es confiable."; exit 1; }
echo "üëç Verificaci√≥n exitosa de la firma binaria."

# 3. Instalar los binarios en una ubicaci√≥n est√°ndar
echo "‚öôÔ∏è  Instalando binarios en /usr/local/bin/..."
tar -xzf "$TAR_FILE"
sudo install -m 0755 -o root -g root -t /usr/local/bin "bitcoin-${BITCOIN_VERSION}/bin/*"
echo "‚úÖ Binarios instalados con √©xito."

# --- SECCI√ìN 2: INICIO DEL NODO ---
echo -e "\n‚û°Ô∏è SECCI√ìN 2: Inicio del nodo en modo regtest..."

# 1. Crear el directorio de datos y el archivo de configuraci√≥n
BITCOIN_DIR="$HOME/.bitcoin"
mkdir -p "$BITCOIN_DIR"
cat > "$BITCOIN_DIR/bitcoin.conf" <<EOF
# Configuraci√≥n para el modo regtest
regtest=1
fallbackfee=0.0001
server=1
txindex=1
EOF

# 2. Iniciar bitcoind como demonio (si no est√° corriendo)
if ! bitcoin-cli -regtest ping > /dev/null 2>&1; then
    bitcoind -daemon
    echo "üöÄ Nodo iniciado. Esperando 5 segundos para que est√© listo..."
    sleep 5
else
    echo "‚úÖ El nodo bitcoind ya est√° en ejecuci√≥n."
fi
bitcoin-cli -regtest getblockchaininfo > /dev/null # Un chequeo final para asegurar que el RPC est√° listo

# --- SECCI√ìN 3: OPERACIONES CON WALLETS Y FONDOS ---
echo -e "\n‚û°Ô∏è SECCI√ìN 3: Creando y financiando wallets..."

echo "üëú Creando wallets 'Miner' y 'Trader' (ignora error si ya existen)..."
bitcoin-cli -regtest createwallet "Miner" "" false false "" false true >/dev/null 2>&1 || true
bitcoin-cli -regtest createwallet "Trader" "" false false "" false true >/dev/null 2>&1 || true

# 4. Generar direcci√≥n y minar bloques para obtener recompensa
MINER_ADDR=$(bitcoin-cli -regtest -rpcwallet=Miner getnewaddress "Recompensa de Mineria")
echo "‚õèÔ∏è  Minando 101 bloques para madurar la recompensa inicial..."
bitcoin-cli -regtest generatetoaddress 101 "$MINER_ADDR" > /dev/null

# 5. Comentario sobre la madurez de la recompensa
echo -e "\n# Explicaci√≥n: Se minan 101 bloques porque una recompensa de bloque (coinbase)"
echo "# necesita 100 confirmaciones adicionales para 'madurar' y poder ser gastada."
echo "# Bloque 1: genera la recompensa. Bloques 2-101: la confirman."

# 6. Imprimir saldo inicial del minero
MINER_INITIAL_BALANCE=$(bitcoin-cli -regtest -rpcwallet=Miner getbalance)
echo "üí∞ Saldo inicial de Miner: $MINER_INITIAL_BALANCE BTC"

# --- SECCI√ìN 4: DEMOSTRACI√ìN DE TRANSACCI√ìN ---
echo -e "\n‚û°Ô∏è SECCI√ìN 4: Realizando una transacci√≥n de Miner a Trader..."

# 1. Crear direcci√≥n en la wallet Trader
TRADER_ADDR=$(bitcoin-cli -regtest -rpcwallet=Trader getnewaddress "Recibido")
echo "üí∏ Enviando 20 BTC desde Miner a la direcci√≥n de Trader: $TRADER_ADDR"
TXID=$(bitcoin-cli -regtest -rpcwallet=Miner sendtoaddress "$TRADER_ADDR" 20)
echo "‚úîÔ∏è Transacci√≥n enviada. TXID: $TXID"

# 2. Mostrar la transacci√≥n en el mempool
echo "üïí Transacci√≥n en el mempool:"
bitcoin-cli -regtest getmempoolentry "$TXID"

# 3. Confirmar la transacci√≥n minando 1 bloque m√°s
echo "üîí Confirmando la transacci√≥n con 1 bloque adicional..."
bitcoin-cli -regtest generatetoaddress 1 "$MINER_ADDR" >/dev/null

# --- SECCI√ìN 5: REPORTE FINAL ---
echo -e "\n‚û°Ô∏è SECCI√ìN 5: Detalles finales de la transacci√≥n confirmada..."

# 4. Obtener todos los detalles de la transacci√≥n usando jq
TX_DATA_VERBOSE=$(bitcoin-cli -regtest -rpcwallet=Miner gettransaction "$TXID" true)
RAW_TX=$(bitcoin-cli -regtest getrawtransaction "$TXID" true)

# Extraer detalles espec√≠ficos
INPUT_AMOUNT=$(echo "$TX_DATA_VERBOSE" | jq -r '.amount | . * -1')
SENT_AMOUNT=$(echo "$TX_DATA_VERBOSE" | jq -r '.details[] | select(.category=="send") | .amount | . * -1')
CHANGE_AMOUNT=$(echo "$TX_DATA_VERBOSE" | jq -r '.details[] | select(.category=="receive" and .address != "'$MINER_ADDR'") | .amount') # Asumiendo que la direcci√≥n de cambio es nueva
FEES=$(echo "$TX_DATA_VERBOSE" | jq -r '.fee | . * -1')
BLOCK_HEIGHT=$(echo "$TX_DATA_VERBOSE" | jq -r '.blockheight')
INPUT_ADDRESS=$(bitcoin-cli -regtest getrawtransaction $(echo $RAW_TX | jq -r .vin[0].txid) true | jq -r ".vout[$(echo $RAW_TX | jq -r .vin[0].vout)].scriptPubKey.address")


# 5. Imprimir los detalles en el formato solicitado
echo "----------------------------------------------------"
echo "txid:           $TXID"
echo "<De, Cantidad>:   $INPUT_ADDRESS, $INPUT_AMOUNT BTC"
echo "<Enviar, Cantidad>: $TRADER_ADDR, $SENT_AMOUNT BTC"
echo "<Cambio, Cantidad>: (Nueva direcci√≥n de Miner), $CHANGE_AMOUNT BTC"
echo "Comisiones:     $FEES BTC"
echo "Bloque:         $BLOCK_HEIGHT"
echo "----------------------------------------------------"
echo "Saldo de Miner:   $(bitcoin-cli -regtest -rpcwallet=Miner getbalance) BTC"
echo "Saldo de Trader:  $(bitcoin-cli -regtest -rpcwallet=Trader getbalance) BTC"

echo -e "\nüéâ ¬°Script completado con √©xito!"